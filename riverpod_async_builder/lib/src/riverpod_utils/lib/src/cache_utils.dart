import 'package:riverpod/riverpod.dart';

// TODO: МБ что-то вроде такого API?
// Наброски схожего поведения есть в extensions/ref_cache.dart в dev_kit,
// но api не очень эргономичное и есть проблемы с реализацией того же cacheByTagFor.
//
// Также, скорее всего, нужно будет переопределять в конкретном приложении, чтобы добавить
// listenUserChanges (Мб его тоже вынести в утилиты, чтобы можно было передавать любой провайдер?),
// т.к. эта утилита вынесена в отдельном пакете.
extension RefCacheUtils on AutoDisposeRef {
  void cacheFor(
    Duration duration, {
    // По умолчанию кеширует состонияе провайдера, но можно указать тег, по которому будет происходить кеширование
    // Это должно пригодится для кеширования семейства провайдеров, когда мы, например, хотим полностью
    // закешировать провайдер со списком при пагинации. При заданном теге, все провайдеры с ним должны
    // уничтожаться одновременно, когда ни у одного из них не осталось слушателей
    String? tag,
    // Флаг, который будет задавать, с какого момента начинать отсчет времени
    // С момента создания кеша или с момента, когда у провайдера больше нет слушателей.
    // Нужно подумать над названием, мб сделать энамом
    bool b = true,
  }) {
    // TODO: implement cacheFor
    throw UnimplementedError();
  }
}
